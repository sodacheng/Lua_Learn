print("******复杂数据类型 table ******")
-- 所有的复杂类型都是table (表)
print("******数组******")
a = {1,2,3,"123",5,true,nil}
-- lua中 索引从1开始
print(a[1])
print(a[4])

-- 数组的长度 => # 是通用的获取长度的关键字
-- 在打印长度的时候 第一个空及后面的都被忽略
-- 如果表(数组)中某一位变成nil 会影响 # 获取的长度
print(#a)

print("*******数组的遍历******")
for i = 1, #a do 
	print(a[i])
end


print("******二维数组******")
-- lua中不存在数组 字典 这些数据类型, 本质都是通过表 体现出这些数据类型的特征
a = {{1,2,3},
     {4,5,6}}
print(a[1][2]) -- 第一个表的第二个
print(a[2][1]) -- 第二个表的第一个


print("******二维数组的遍历******")
for i = 1, #a do
	b = a[i]
	for j = 1, #b do
		print(b[j])
	end
end

print("******自定义索引******")
-- 不建议通过数字的形式 自定义索引
aa = {[0] = 1,2,3, [-1] = 4 ,5} -- 不建议用负数
print(aa[0])
print(aa[-1])
print(#aa)  -- 3 从1开始遍历 0 和 -1 不会管
print(aa[1]) -- 2
print(aa[2]) -- 3
print(aa[3]) -- 5

aa = {[1] = 1, [2] = 2, [4] = 4, [5] = 5}
print(#aa) -- 5 Lua代码底层的坑
aa = {[1] = 1, [2] = 2, [5] = 4, [6] = 5}
print(#aa) -- 2 Lua代码底层的坑
aa = {[1] = 1, [2] = 2, [4] = 4, [6] = 5}
print(#aa) -- 6 Lua代码底层的坑

for i = 1, #aa do
	print(aa[i])
end